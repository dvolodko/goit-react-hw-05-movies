{"version":3,"file":"static/js/290.c14e58a2.chunk.js","mappings":"mTACMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,2FACzBC,EADyB,sCACuBH,GADvB,kBAExBI,EAAID,IAFoB,2CAAH,qDAKjBE,EAAe,mCAAG,WAAMC,GAAN,8EACvBC,EADuB,iBACED,EADF,oBACqBN,EADrB,qCAEtBI,EAAIG,IAFkB,2CAAH,sDAKfC,EAAe,mCAAG,WAAMF,GAAN,8EACvBG,EADuB,iBACEH,EADF,4BAC6BN,EAD7B,qCAEtBI,EAAIK,IAFkB,2CAAH,sDAKfC,EAAe,mCAAG,WAAMJ,GAAN,8EACvBK,EADuB,iBACEL,EADF,4BAC6BN,EAD7B,qCAEtBI,EAAIO,IAFkB,2CAAH,sDAKfC,EAAkB,mCAAG,WAAMC,GAAN,8EAC1BC,EAD0B,gCACiBd,EADjB,iCACiDa,EADjD,yCAEzBT,EAAIU,IAFqB,2CAAH,sDAKzBV,EAAG,mCAAG,WAAMW,GAAN,kGAEed,EAAAA,EAAAA,IAAUc,GAFzB,uBAEAC,EAFA,EAEAA,KAFA,kBAGDA,GAHC,gCAKRC,QAAQC,IAAR,qBAA0BH,EAA1B,oBACAE,QAAQC,IAAR,gBANQ,yDAAH,qD,oLC3BIC,EAAkBC,EAAAA,EAAAA,IAAH,8CAIfC,EAAaD,EAAAA,EAAAA,GAAH,iGAOVE,EAAQF,EAAAA,EAAAA,GAAH,8MAOLG,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,2GAOVK,EAAaL,EAAAA,EAAAA,KAAH,gD,SCfVM,EAAS,WACpB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOb,EAAP,KAAwBgB,EAAxB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAa5B,IAAI,SAC9B+B,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKH,EAAL,CAEA,IAAMI,EAAO,mCAAG,qGACO1B,EAAAA,EAAAA,IAAmBsB,GAD1B,OACRK,EADQ,OAEdT,EAAmBS,EAAOC,SAFZ,2CAAH,qDAIbF,GANuB,CAOxB,GAAE,CAACJ,IAkBJ,OACE,UAACf,EAAD,YACE,UAACM,EAAD,CAAYgB,SAdK,SAAAC,GACnBA,EAAMC,iBAEqB,KAAvBf,EAAYgB,OAMhBX,EAAgB,CAAElB,MAAOa,IALvBiB,MACE,mFAKL,EAIG,WACE,kBACEC,KAAK,OACLC,YAAY,gBACZC,MAAOpB,EACPqB,SAvBa,SAAAP,GACnBb,EAAea,EAAMQ,cAAcF,MACpC,KAuBK,mBAAQF,KAAK,SAAb,wBAEF,SAACzB,EAAD,UACGP,EAAgBqC,KAAI,SAAAC,GAAK,OACxB,SAAC9B,EAAD,WACE,UAACC,EAAD,CAAY8B,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMrB,GAA9C,WACE,gBACEsB,IAAG,yCAAoCL,EAAMM,aAC7CC,IAAKP,EAAMQ,QAEZR,EAAMQ,UANCR,EAAME,GADM,QAcjC,ECtEc,SAASO,IACtB,OAAO,SAACnC,EAAD,GACR,C","sources":["api-service.js","components/Movies/Movies.styled.js","components/Movies/Movies.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'ed6f703d0e9f91008dbdcbc89334b381';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const trendingMovies = `/trending/movie/day?api_key=${API_KEY}`;\n  return get(trendingMovies);\n};\n\nexport const getMovieDetails = async movieId => {\n  const movieDetails = `/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n  return get(movieDetails);\n};\n\nexport const getMovieCredits = async movieId => {\n  const movieCredits = `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n  return get(movieCredits);\n};\n\nexport const getMovieReviews = async movieId => {\n  const moviesReview = `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n  return get(moviesReview);\n};\n\nexport const getMoviesByKeyword = async keyword => {\n  const moviesByKeyword = `/search/movie?api_key=${API_KEY}&language=en-US&query=${keyword}&include_adult=true`;\n  return get(moviesByKeyword);\n};\n\nconst get = async query => {\n  try {\n    const { data } = await axios.get(query);\n    return data;\n  } catch (error) {\n    console.log(`Request to ${query} threw an error`);\n    console.log(`Error: `, error);\n  }\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesContainer = styled.div`\n  padding-top: 96px;\n`;\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const Movie = styled.li`\n  flex-basis: calc((100% - 3 * 30px) / 4);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  text-align: center;\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: #000;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const SearchForm = styled.form`\n  margin-bottom: 30px;\n`;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getMoviesByKeyword } from 'api-service';\n// import PropTypes from 'prop-types';\nimport {\n  MoviesContainer,\n  MoviesList,\n  Movie,\n  StyledLink,\n  SearchForm,\n} from './Movies.styled';\n\nexport const Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [moviesByKeyword, setMoviesByKeyword] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieQuery = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieQuery) return;\n\n    const getData = async () => {\n      const movies = await getMoviesByKeyword(movieQuery);\n      setMoviesByKeyword(movies.results);\n    };\n    getData();\n  }, [movieQuery]);\n\n  const handleChange = event => {\n    setSearchQuery(event.currentTarget.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (searchQuery.trim() === '') {\n      alert(\n        'You are trying to search for empty string. Please type something in search field'\n      );\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n  };\n\n  return (\n    <MoviesContainer>\n      <SearchForm onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search movies\"\n          value={searchQuery}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Search</button>\n      </SearchForm>\n      <MoviesList>\n        {moviesByKeyword.map(movie => (\n          <Movie key={movie.id}>\n            <StyledLink to={`${movie.id}`} state={{ from: location }}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                alt={movie.title}\n              />\n              {movie.title}\n            </StyledLink>\n          </Movie>\n        ))}\n      </MoviesList>\n    </MoviesContainer>\n  );\n};\n","import { Movies } from 'components/Movies/Movies';\n\nexport default function MoviesPage() {\n  return <Movies></Movies>;\n}\n"],"names":["API_KEY","axios","getTrendingMovies","trendingMovies","get","getMovieDetails","movieId","movieDetails","getMovieCredits","movieCredits","getMovieReviews","moviesReview","getMoviesByKeyword","keyword","moviesByKeyword","query","data","console","log","MoviesContainer","styled","MoviesList","Movie","StyledLink","Link","SearchForm","Movies","useState","searchQuery","setSearchQuery","setMoviesByKeyword","useSearchParams","searchParams","setSearchParams","movieQuery","location","useLocation","useEffect","getData","movies","results","onSubmit","event","preventDefault","trim","alert","type","placeholder","value","onChange","currentTarget","map","movie","to","id","state","from","src","poster_path","alt","title","MoviesPage"],"sourceRoot":""}